{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class FilterPipe {\n  transform(value, filterString, propName) {\n    if (!Array.isArray(value) || !filterString || !propName) {\n      // Handle invalid input\n      return value;\n    }\n    const result = [];\n    const normalizedFilter = filterString.toLowerCase();\n    value.forEach(item => {\n      if (item[propName] && typeof item[propName] === 'string') {\n        const normalizedProp = item[propName].trim().toLowerCase();\n        if (normalizedProp.includes(normalizedFilter)) {\n          result.push(item);\n        }\n      }\n    });\n    return result;\n  }\n}\n_class = FilterPipe;\n_class.ɵfac = function FilterPipe_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n  name: \"filter\",\n  type: _class,\n  pure: true\n});","map":{"version":3,"names":["FilterPipe","transform","value","filterString","propName","Array","isArray","result","normalizedFilter","toLowerCase","forEach","item","normalizedProp","trim","includes","push","pure"],"sources":["D:\\Projects\\MovieMarvels\\src\\app\\sharedPipe\\filter.pipe.ts"],"sourcesContent":["// import { Pipe, PipeTransform } from '@angular/core';\n\n// @Pipe({\n//   name: 'filter'\n// })\n// export class FilterPipe implements PipeTransform {\n\n//   transform(value: any[], filterString: string, propName: string): any[] {\n//     const result : any[] = [];\n//     if(!value || filterString === '' || propName === '') {\n//       return value;\n//     }\n//     value.forEach((a: any) => {\n//       if(a[propName].trim().toLowerCase().includes(filterString.toLowerCase())) {\n//         result.push(a)\n//       }\n//     });\n//     return result;\n//   }\n\n// }\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'filter'\n})\nexport class FilterPipe implements PipeTransform {\n\n  transform(value: any[], filterString: string, propName: string): any[] {\n    if (!Array.isArray(value) || !filterString || !propName) {\n      // Handle invalid input\n      return value;\n    }\n\n    const result: any[] = [];\n    const normalizedFilter = filterString.toLowerCase();\n\n    value.forEach((item: any) => {\n      if (item[propName] && typeof item[propName] === 'string') {\n        const normalizedProp = item[propName].trim().toLowerCase();\n        if (normalizedProp.includes(normalizedFilter)) {\n          result.push(item);\n        }\n      }\n    });\n\n    return result;\n  }\n}\n"],"mappings":";;AA0BA,OAAM,MAAOA,UAAU;EAErBC,SAASA,CAACC,KAAY,EAAEC,YAAoB,EAAEC,QAAgB;IAC5D,IAAI,CAACC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,IAAI,CAACC,YAAY,IAAI,CAACC,QAAQ,EAAE;MACvD;MACA,OAAOF,KAAK;;IAGd,MAAMK,MAAM,GAAU,EAAE;IACxB,MAAMC,gBAAgB,GAAGL,YAAY,CAACM,WAAW,EAAE;IAEnDP,KAAK,CAACQ,OAAO,CAAEC,IAAS,IAAI;MAC1B,IAAIA,IAAI,CAACP,QAAQ,CAAC,IAAI,OAAOO,IAAI,CAACP,QAAQ,CAAC,KAAK,QAAQ,EAAE;QACxD,MAAMQ,cAAc,GAAGD,IAAI,CAACP,QAAQ,CAAC,CAACS,IAAI,EAAE,CAACJ,WAAW,EAAE;QAC1D,IAAIG,cAAc,CAACE,QAAQ,CAACN,gBAAgB,CAAC,EAAE;UAC7CD,MAAM,CAACQ,IAAI,CAACJ,IAAI,CAAC;;;IAGvB,CAAC,CAAC;IAEF,OAAOJ,MAAM;EACf;;SArBWP,UAAU;;mBAAVA,MAAU;AAAA;;;QAAVA,MAAU;EAAAgB,IAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}